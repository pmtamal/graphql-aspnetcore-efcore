// <auto-generated />
using System;
using GraphQLAgentApp.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GraphQLAgentApp.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250805071116_EnhancedBookstoreSchema")]
    partial class EnhancedBookstoreSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biography = "Co-author of The Pragmatic Programmer",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1964, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Andrew",
                            LastName = "Hunt",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 2,
                            Biography = "Uncle Bob, software engineer and author",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1952, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Robert C.",
                            LastName = "Martin",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 3,
                            Biography = "Author of Domain-Driven Design",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1965, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Eric",
                            LastName = "Evans",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 4,
                            Biography = "Software architect and author",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1963, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Martin",
                            LastName = "Fowler",
                            Nationality = "British"
                        },
                        new
                        {
                            Id = 5,
                            Biography = "Software engineer and creator of Extreme Programming",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1961, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Kent",
                            LastName = "Beck",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 6,
                            Biography = "Software consultant and author",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Michael",
                            LastName = "Feathers",
                            Nationality = "American"
                        },
                        new
                        {
                            Id = 7,
                            Biography = "Software engineer and DevOps advocate",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1975, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Jez",
                            LastName = "Humble",
                            Nationality = "British"
                        },
                        new
                        {
                            Id = 8,
                            Biography = "JavaScript educator and author",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Kyle",
                            LastName = "Simpson",
                            Nationality = "American"
                        });
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A guide to software development",
                            ISBN = "978-0201616224",
                            IsAvailable = true,
                            Language = "English",
                            Pages = 352,
                            Price = 49.99m,
                            PublicationYear = 1999,
                            Publisher = "Addison-Wesley",
                            StockQuantity = 25,
                            Title = "The Pragmatic Programmer"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A handbook of agile software craftsmanship",
                            ISBN = "978-0132350884",
                            IsAvailable = true,
                            Language = "English",
                            Pages = 464,
                            Price = 44.99m,
                            PublicationYear = 2008,
                            Publisher = "Prentice Hall",
                            StockQuantity = 30,
                            Title = "Clean Code"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            CategoryId = 8,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tackling complexity in the heart of software",
                            ISBN = "978-0321125217",
                            IsAvailable = true,
                            Language = "English",
                            Pages = 560,
                            Price = 54.99m,
                            PublicationYear = 2003,
                            Publisher = "Addison-Wesley",
                            StockQuantity = 20,
                            Title = "Domain-Driven Design"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Improving the design of existing code",
                            ISBN = "978-0201485677",
                            IsAvailable = true,
                            Language = "English",
                            Pages = 448,
                            Price = 39.99m,
                            PublicationYear = 1999,
                            Publisher = "Addison-Wesley",
                            StockQuantity = 15,
                            Title = "Refactoring"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "By example",
                            ISBN = "978-0321146533",
                            IsAvailable = true,
                            Language = "English",
                            Pages = 240,
                            Price = 34.99m,
                            PublicationYear = 2002,
                            Publisher = "Addison-Wesley",
                            StockQuantity = 18,
                            Title = "Test-Driven Development"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Patterns for enterprise applications",
                            ISBN = "978-0321127426",
                            IsAvailable = true,
                            Language = "English",
                            Pages = 560,
                            Price = 49.99m,
                            PublicationYear = 2002,
                            Publisher = "Addison-Wesley",
                            StockQuantity = 12,
                            Title = "Patterns of Enterprise Application Architecture"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 6,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Strategies for working with legacy code",
                            ISBN = "978-0131177055",
                            IsAvailable = true,
                            Language = "English",
                            Pages = 464,
                            Price = 42.99m,
                            PublicationYear = 2004,
                            Publisher = "Prentice Hall",
                            StockQuantity = 8,
                            Title = "Working Effectively with Legacy Code"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 2,
                            CategoryId = 7,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A code of conduct for professional programmers",
                            ISBN = "978-0137081073",
                            IsAvailable = true,
                            Language = "English",
                            Pages = 256,
                            Price = 39.99m,
                            PublicationYear = 2011,
                            Publisher = "Prentice Hall",
                            StockQuantity = 22,
                            Title = "The Clean Coder"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 7,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Reliable software releases through build, test, and deployment automation",
                            ISBN = "978-0321601919",
                            IsAvailable = true,
                            Language = "English",
                            Pages = 512,
                            Price = 44.99m,
                            PublicationYear = 2010,
                            Publisher = "Addison-Wesley",
                            StockQuantity = 16,
                            Title = "Continuous Delivery"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 8,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Up & Going",
                            ISBN = "978-1491904244",
                            IsAvailable = true,
                            Language = "English",
                            Pages = 88,
                            Price = 19.99m,
                            PublicationYear = 2015,
                            Publisher = "O'Reilly Media",
                            StockQuantity = 35,
                            Title = "You Don't Know JS"
                        });
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books about programming and software development",
                            Name = "Programming"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books about software architecture and design patterns",
                            Name = "Software Architecture"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books about software testing and quality assurance",
                            Name = "Testing"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books about DevOps and continuous delivery",
                            Name = "DevOps"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books about JavaScript and web development",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books about working with legacy code",
                            Name = "Legacy Code"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books about writing clean and maintainable code",
                            Name = "Clean Code"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Books about domain-driven design",
                            Name = "Domain-Driven Design"
                        });
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            City = "New York",
                            Country = "USA",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@email.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Phone = "+1-555-0101",
                            PostalCode = "10001",
                            State = "NY"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Oak Ave",
                            City = "Los Angeles",
                            Country = "USA",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1990, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@email.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Phone = "+1-555-0102",
                            PostalCode = "90210",
                            State = "CA"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Pine Rd",
                            City = "Chicago",
                            Country = "USA",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1982, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob.johnson@email.com",
                            FirstName = "Bob",
                            LastName = "Johnson",
                            Phone = "+1-555-0103",
                            PostalCode = "60601",
                            State = "IL"
                        },
                        new
                        {
                            Id = 4,
                            Address = "321 Elm St",
                            City = "Houston",
                            Country = "USA",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1988, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.brown@email.com",
                            FirstName = "Alice",
                            LastName = "Brown",
                            Phone = "+1-555-0104",
                            PostalCode = "77001",
                            State = "TX"
                        },
                        new
                        {
                            Id = 5,
                            Address = "654 Maple Dr",
                            City = "Phoenix",
                            Country = "USA",
                            CreatedAt = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1995, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "charlie.wilson@email.com",
                            FirstName = "Charlie",
                            LastName = "Wilson",
                            Phone = "+1-555-0105",
                            PostalCode = "85001",
                            State = "AZ"
                        });
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Book", b =>
                {
                    b.HasOne("GraphQLAgentApp.Models.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GraphQLAgentApp.Models.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Order", b =>
                {
                    b.HasOne("GraphQLAgentApp.Models.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.OrderItem", b =>
                {
                    b.HasOne("GraphQLAgentApp.Models.Entities.Book", "Book")
                        .WithMany("OrderItems")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GraphQLAgentApp.Models.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Review", b =>
                {
                    b.HasOne("GraphQLAgentApp.Models.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GraphQLAgentApp.Models.Entities.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Book", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Customer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("GraphQLAgentApp.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
